Configura√ß√£o de ponta-a-ponta
#############################

√Äs vezes √© necess√°rio integrar diversas etapas do Querido Di√°rio, principalmente ao
desenvolver solu√ß√µes no frontend que necessitam de dados que ainda n√£o est√£o em
produ√ß√£o.

Como o QD utiliza `podman`_ para gerir sua infraestrutura, orquestrar as etapas
consiste em ajustar vari√°veis de ambiente e garantir que os containers est√£o
conseguindo se comunicar.

.. attention::
    Esta documenta√ß√£o foi testada principalmente em ambientes Linux. Ambientes
    Windows WSL ou MacOS podem ter algumas diferen√ßas (contribui√ß√µes s√£o bem vindas!).

Come√ßando a configurar pelo processamento de dados
**************************************************

Como os recursos (banco de dados, motor de busca, etc.) utilizados pelo QD localmente
ser√£o compartilhados por diferentes etapas, o `processamento de dados`_ √© um bom
projeto para configurar inicialmente, pois utiliza diversos desses recursos em suas
tarefas de processamento.

Para configur√°-lo, seguiremos o passo-a-passo:

1. `Instale o podman`_ (caso n√£o esteja instalado);

2. Execute:

    .. code-block:: bash

      make build

3. Execute (``FULL_PROJECT=true`` faz com que portas adicionais sejam abertas pelo pod
   que ser√° criado):

    .. code-block:: bash

      FULL_PROJECT=true make setup

.. tip::
    Se essa for a primeira vez que est√° executando o projeto, as vari√°veis de ambiente
    ser√£o criadas no arquivo ``envvars``, na ra√≠z do reposit√≥rio. Aqui voc√™ ter√° as
    credenciais do armazenamento de objetos (Minio), por exemplo.

.. warning::
    Ao executar o comando ``make setup``, um erro ``bind: address already in use`` pode
    aparecer. Nesse caso, verifique se n√£o tem algum outro servi√ßo no seu computador
    utilizando a porta indicada e o pare (ou modifique as vari√°veis de ambiente e/ou
    Makefile, se souber o que est√° fazendo).

    Caso a porta esteja sendo usada pelo pr√≥prio podman por algum erro de execu√ß√£o voc√™
    pode terminar o programa com o comando (usando a porta 8000 de exemplo) ``sudo
    kill -9 $(sudo lsof -t -i:8000)``.

    Ao terminar, execute o ``make setup`` novamente.

Agora o pod foi criado, e dentro dele v√°rios recursos como Opensearch, Postgres e Minio
est√£o sendo executados. Por√©m, eles ainda est√£o "vazios". Vamos popul√°-los utilizando
o reposit√≥rio de raspadores.

Gerando dados com os raspadores
*******************************

Queremos executar raspadores para popular nosso banco com di√°rios oficiais para serem
processados. Para isso, s√≥ precisamos configurar o seguinte no
`reposit√≥rio de raspadores`_:

1. Copie ``data_collection/.local.env`` para ``data_collection/.env``;

2. Configure o ambiente de desenvolvimento e execute raspadores normalmente, como
   indicado em sua documenta√ß√£o.

Processando os documentos raspados
**********************************

Agora que temos o armazenamento de objetos e algumas tabelas do banco Postgres
populadas, vamos executar o pipeline principal do processamento de dados para que os
arquivos TXT sejam gerados e o motor de busca seja populado:

1. Execute, no reposit√≥rio do processamento de dados:

    .. code-block:: bash

      make re-run

.. note::
    Perceba que o ``make re-run`` est√° sendo executado aqui e n√£o o ``make run``, pois
    o ``make run`` executa o ``make setup``, e se o ``make setup`` for executado, todos
    os recursos ser√£o destru√≠dos e reconstru√≠dos novamente, anulando a raspagem que foi
    realizada.

Agora temos arquivos, tabelas e √≠ndices populados. Podemos habilitar a API.

Habilitando a API
*****************

1. Execute, no reposit√≥rio da `API`_:

    .. code-block:: bash

      make build

2. Execute:

    .. code-block:: bash

      make re-run

.. note::
    Pelo mesmo motivo que no processamento de dados, o ``make re-run`` est√° sendo
    executado aqui e n√£o o ``make run``.

Com a API dispon√≠vel, podemos iniciar o backend local.

Habilitando o backend
*********************

Para lidar com o `Querido Di√°rio: Tecnologias na Educa√ß√£o`_, √© necess√°rio configurar o
`backend`_ da seguinte forma:

1. Configure o ambiente de desenvolvimento como indicado na documenta√ß√£o;

2. Fa√ßa o cadastro do superusu√°rio como pedido.

Com o backend dispon√≠vel, o frontend que usa API e backend locais tamb√©m pode ser
configurado.

Habilitando o frontend
**********************

Finalmente chegamos na outra ponta da arquitetura do QD, o `frontend`_! Aqui vamos fazer o seguinte:

1. Configure o ambiente de desenvolvimento como indicado na documenta√ß√£o;

2. Aplique esse patch no reposit√≥rio:

    .. code-block:: bash

      ./src/app/constants.ts
      - export const API = 'https://queridodiario.ok.org.br/api';
      + export const API = 'http://localhost:8080';

      ./src/app/services/utils/index.ts
      - export const educationApi = 'https://backend-api.queridodiario.ok.org.br/api/';

      + export const educationApi = 'http://localhost:8000/api/';

Pronto! Agora o ambiente est√° todo configurado üéâ

Dicas de uso do ambiente
************************

Algumas maneiras √∫teis de usar o ambiente de desenvolvimento:

1. Quer acessar o banco postgres para ver registros de di√°rios oficiais, usu√°rios do
backend, etc.?

    Execute ``make shell-database`` no reposit√≥rio querido-diario-data-processing e
    estar√° na linha de comando ``psql``.

2. Quer acessar o motor de busca para ver os √≠ndices textuais de di√°rios e excertos
tem√°ticos?

    Execute:

    .. code-block:: bash

      curl -k -u admin:admin -X GET "localhost:9200/_cat/indices?v&pretty=true

    Outros endpoints funcionar√£o igualmente de acordo com a documenta√ß√£o do opensearch.

3. Quer acessar o sistema de arquivos para ver onde foram baixados?

    Acesse `localhost:9000 <http://localhost:9000>`_ com as credenciais localizadas no
    ``envvars`` do reposit√≥rio querido-diario-data-processing.

4. Quer baixar mais arquivos de di√°rios e process√°-los?

    Execute outro ``scrapy crawl`` no reposit√≥rio querido-diario e ent√£o execute ``make
    re-run`` no querido-diario-data-processing novamente.

5. No frontend o live reload est√° habilitado, mas na API e backend n√£o. Como checar as
mudan√ßas?

    Na API, execute ``make re-run`` novamente. No backend, execute:

    .. code-block:: bash

      python -m cli setup -- pod-name querido-diario

6. Como acessar a documenta√ß√£o da API?

    Acesse `0.0.0.0:8080/docs <0.0.0.0:8080/docs>`_.

    .. tip::
        Caso ``0.0.0.0`` n√£o funcione, use `localhost:8080/docs
        <http://localhost:8080/docs>`_.

7. Como acessar o painel de admin do backend?

    Acesse `0.0.0.0:8000/api/admin <http://0.0.0.0:8000/api/admin>`_ com as credenciais
    de superusu√°rio criadas anteriormente.

    .. tip::
        Caso ``0.0.0.0`` n√£o funcione, use `localhost:8000/api/admin
        <http://localhost:8000/api/admin>`_.

.. Refer√™ncias
.. _podman: https://podman.io/
.. _processamento de dados: https://github.com/okfn-brasil/querido-diario-data-processing/
.. _reposit√≥rio de raspadores: https://github.com/okfn-brasil/querido-diario/
.. _API: https://github.com/okfn-brasil/querido-diario-api/
.. _backend: https://github.com/okfn-brasil/querido-diario-backend/
.. _frontend: https://github.com/okfn-brasil/querido-diario-frontend/
.. _Instale o podman: https://podman.io/docs/installation
.. _Querido Di√°rio\: Tecnologias na Educa√ß√£o: https://queridodiario.ok.org.br/educacao

